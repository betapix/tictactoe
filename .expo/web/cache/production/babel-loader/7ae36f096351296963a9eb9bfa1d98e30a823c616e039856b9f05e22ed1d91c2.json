{"ast":null,"code":"import invariant from'fbjs/lib/invariant';import EmitterSubscription from\"./_EmitterSubscription\";import EventSubscriptionVendor from\"./_EventSubscriptionVendor\";var sparseFilterPredicate=function sparseFilterPredicate(){return true;};var EventEmitter=function(){function EventEmitter(subscriber){this._subscriber=subscriber||new EventSubscriptionVendor();}var _proto=EventEmitter.prototype;_proto.addListener=function addListener(eventType,listener,context){return this._subscriber.addSubscription(eventType,new EmitterSubscription(this,this._subscriber,listener,context));};_proto.removeAllListeners=function removeAllListeners(eventType){this._subscriber.removeAllSubscriptions(eventType);};_proto.removeSubscription=function removeSubscription(subscription){invariant(subscription.emitter===this,'Subscription does not belong to this emitter.');this._subscriber.removeSubscription(subscription);};_proto.listenerCount=function listenerCount(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);return subscriptions?subscriptions.filter(sparseFilterPredicate).length:0;};_proto.emit=function emit(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription&&subscription.listener){subscription.listener.apply(subscription.context,args);}}}};_proto.removeListener=function removeListener(eventType,listener){console.error(\"EventEmitter.removeListener('\"+eventType+\"', ...): Method has been \"+'deprecated. Please instead use `remove()` on the subscription '+'returned by `EventEmitter.addListener`.');var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription&&subscription.listener===listener){subscription.remove();}}}};return EventEmitter;}();export default EventEmitter;","map":{"version":3,"names":["invariant","EmitterSubscription","EventSubscriptionVendor","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","_proto","prototype","addListener","eventType","listener","context","addSubscription","removeAllListeners","removeAllSubscriptions","removeSubscription","subscription","emitter","listenerCount","subscriptions","getSubscriptionsForType","filter","length","emit","_len","arguments","args","Array","_key","i","l","apply","removeListener","console","error","remove"],"sources":["E:/Projects/IN_BUILD/TicTacToe/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @typecheck\n */\nimport invariant from 'fbjs/lib/invariant';\nimport EmitterSubscription from './_EmitterSubscription';\nimport EventSubscriptionVendor from './_EventSubscriptionVendor';\n\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nvar EventEmitter = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  }\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  ;\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n  /**\n   * Returns the number of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {number}\n   */\n  ;\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? // We filter out missing entries because the array is sparse.\n    // \"callbackfn is called only for elements of the array which actually\n    // exist; it is not called for missing elements of the array.\"\n    // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n    subscriptions.filter(sparseFilterPredicate).length : 0;\n  }\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  ;\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(subscription.context, args);\n        }\n      }\n    }\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeListener = function removeListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener) {\n    console.error(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `EventEmitter.addListener`.');\n\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}